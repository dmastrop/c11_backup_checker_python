stages:
  - build
  - push
  - deploy
  - cleanup

# 2 images will be created, one with the COMMIT_SHORT_SHA has and one with latest as their tags
# Reference predefined variables here:   https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
# The . indicates the Dockerfile in the current root directory of this project
build:
  stage: build
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID-$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE:latest .

# Push both of these images to the private image registry in gitlab. This listens on a different port from gitlab as indicated# in the ansible gitlab playbook      
push:
  stage: push
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID-$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

# the before_script will create the .env file on the fly. So it does not need to be pushed to gitlab.  The sensitive ones
# have already been entered directly into the gitlab project, namely db_password and zulip_bot_api_key      
# .env is still in the .gitignore and will not be pushed. The deploy will only occur if we push to the main branch 
deploy:
  stage: deploy
  before_script:
    - echo 'db_host=10.36.7.11' >> .env
    - echo 'db_username=backup_script' >> .env
    - echo 'db_password='${db_password} >> .env
    - echo 'database=backups' >> .env
    - echo 'db_table=list' >> .env
    - echo 'zulip_bot_name=do-bot' >> .env
    - echo 'zulip_bot_api_key='${zulip_bot_api_key} >> .env
    - echo 'zulip_organization=zulip.do-p.com' >> .env
    - echo 'zulip_stream=vps' >> .env
    - echo 'zulip_topic=backups' >> .env
  script:
    - docker run --env-file .env $CI_REGISTRY_IMAGE:latest
  only:
    - main

# clean up the old docker images
cleanup:
  stage: cleanup
  script:
    - docker rmi $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID-$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:latest -f
